# 15/05/2025

# Importa bibliotecas: 'os' para comandos do sistema e 'time' para pausas
import os
import time

# Fun√ß√£o que limpa a tela do terminal, compat√≠vel com Windows e Unix
def limpar_tela():
    os.system('cls' if os.name == 'nt' else 'clear')

# Fun√ß√£o que exibe o cabe√ßalho principal do programa
def exibir_cabecalho():
    print("üéì CALCULADORA DE M√âDIAS ESCOLARES üéì")
    print("-" * 40)

# Fun√ß√£o que limpa a tela e exibe novamente o cabe√ßalho (evita repeti√ß√£o de c√≥digo)
def reiniciar_tela_com_cabecalho():
    limpar_tela()
    exibir_cabecalho()

# Fun√ß√£o gen√©rica para obter um n√∫mero v√°lido do usu√°rio
# Pode ser usada para inteiros ou floats, com valida√ß√£o personalizada
def obter_numero_valido(prompt, tipo=float, condicao=lambda x: True, mensagem_erro="Entrada inv√°lida. Tente novamente."):
    while True:
        try:
            # Tenta converter a entrada para o tipo desejado
            valor = tipo(input(prompt))
            # Se a condi√ß√£o for satisfeita, retorna o valor
            if condicao(valor):
                return valor
            else:
                # Se n√£o, limpa a tela, mostra o cabe√ßalho e exibe a mensagem de erro
                reiniciar_tela_com_cabecalho()
                print(mensagem_erro)
        except ValueError:
            # Caso ocorra erro na convers√£o, reinicia tela e mostra erro
            reiniciar_tela_com_cabecalho()
            print(mensagem_erro)

# Fun√ß√£o principal do programa
def main():
    # Limpa a tela e exibe o cabe√ßalho
    reiniciar_tela_com_cabecalho()

    # Solicita o nome do aluno e formata com a primeira letra mai√∫scula
    nome_aluno = input("Informe o nome do aluno: ").strip().title()

    # Pergunta quantas mat√©rias ser√£o avaliadas, com valida√ß√£o
    qtd_materias = obter_numero_valido(
        "Quantas mat√©rias ser√£o avaliadas? ",
        tipo=int,
        condicao=lambda x: x > 0,
        mensagem_erro="Digite um n√∫mero inteiro positivo."
    )

    # Listas para armazenar nomes das mat√©rias e suas respectivas notas
    materias = []
    notas = []

    # Loop para entrada das mat√©rias e notas
    for i in range(qtd_materias):
        reiniciar_tela_com_cabecalho()
        print(f"Mat√©ria {i + 1} de {qtd_materias}")
        
        # Entrada e formata√ß√£o do nome da mat√©ria
        materia = input("Nome da mat√©ria: ").strip().title()

        # Entrada da nota com valida√ß√£o entre 0 e 10
        nota = obter_numero_valido(
            f"Nota de {materia}: ",
            tipo=float,
            condicao=lambda x: 0 <= x <= 10,
            mensagem_erro="Digite uma nota entre 0 e 10."
        )

        # Armazena os dados nas listas
        materias.append(materia)
        notas.append(nota)

    # Calcula a m√©dia final
    media = sum(notas) / qtd_materias

    # Exibe o resultado final na tela
    limpar_tela()
    print("üìã RESULTADO FINAL")
    print("-" * 40)
    print(f"Aluno: {nome_aluno}")
    print("Notas:")

    # Lista cada mat√©ria com sua nota correspondente
    for mat, nt in zip(materias, notas):
        print(f" - {mat}: {nt}")

    # Mostra a m√©dia formatada com duas casas decimais
    print(f"\nüßÆ M√©dia final: {media:.2f}")

    # Avalia a situa√ß√£o do aluno com base na m√©dia
    if media >= 7:
        print("‚úÖ Situa√ß√£o: Aprovado!")
    elif media >= 5:
        print("‚ö†Ô∏è Situa√ß√£o: Recupera√ß√£o.")
    else:
        print("‚ùå Situa√ß√£o: Reprovado.")

    print("-" * 40)
    print("Fim do programa.")
    
    # Pausa de 2 segundos antes de encerrar
    time.sleep(2)

# Ponto de entrada do programa
if __name__ == "__main__":
    main()
